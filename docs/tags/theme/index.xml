<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>theme on Universal</title>
    <link>https://goliot.github.io/teamWebPage/tags/theme/</link>
    <description>Recent content in theme on Universal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 May 2023 21:29:20 +0200</lastBuildDate><atom:link href="https://goliot.github.io/teamWebPage/tags/theme/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>컨테이너란 무엇인가?</title>
      <link>https://goliot.github.io/teamWebPage/container/categories-post/</link>
      <pubDate>Tue, 23 May 2023 21:29:20 +0200</pubDate>
      
      <guid>https://goliot.github.io/teamWebPage/container/categories-post/</guid>
      <description>컨테이너 컨테이너는 한 컴퓨팅 환경에서 다른 컴퓨팅 환경으로 빠르고 안정적으로 애플리케이션을 실행할 수 있도록 코드와 모든 종속성을 패키지화하는 소프트웨어의 표준 단위입니다.
• OS 커널을 여러 개의 격리된 공간으로 격리(Isolation)하여 독립적인 여러 개의 시스템처럼 사용하는 가상화
• 호스트 OS의 커널을 공유하며 OS를 새로 설치하지 않음
• 커널을 공유하는 방식이기 때문에 실행 속도가 빠르고, 성능 상의 손실이 거의 없음
• 사용자에게는 가상 머신처럼 보임
• 다른 OS를 사용할 수 없음
Docker 컨테이너 중에 잘 알려져 있는 컨테이너는 Docker 입니다.</description>
    </item>
    
    <item>
      <title>도커 사용법</title>
      <link>https://goliot.github.io/teamWebPage/container/creating-a-new-theme/</link>
      <pubDate>Tue, 23 May 2023 13:50:46 +0200</pubDate>
      
      <guid>https://goliot.github.io/teamWebPage/container/creating-a-new-theme/</guid>
      <description>Docekr 다운로드 및 실행   도커 다운로드 사이트 접속 (URL : https://www.docker.com/products/docker-desktop)
  자신의 OS에 맞는 다운로드 설정 선택 후 다운로드
  Docker 실행
  Docker Image 다운로드 방법   도커 허브에 접속 (URL : https://hub.docker.com)
  필요한 도커 이미지 검색
  검색 결과 중 원하는 이미지를 선택하고 태그를 선택 (태그는 이미지 파일의 버전과 같은 역할을 함)
  도커 이미지를 PULL 하여 이미지 저장</description>
    </item>
    
    <item>
      <title>Github Post</title>
      <link>https://goliot.github.io/teamWebPage/git/github_post/</link>
      <pubDate>Sun, 01 Aug 2021 21:29:20 +0200</pubDate>
      
      <guid>https://goliot.github.io/teamWebPage/git/github_post/</guid>
      <description>github란?  코드 저장소를 호스팅하고 관리하기 위한 웹 기반 플랫폼으로, 다양한 개발자들이 협업하고 소스 코드를 공유하는 데 사용된다. git을 기반으로 한 원격 저장소 호스팅 서비스 https://github.com 계정을 만들고 사용 무료, 유상 서비스 문서 : https://docs.github.com/ko 스킬 : https://skills.github.com/  보안 설정  “2FA”(투팩터 인증)을 설정  https://docs.github.com/ko/authentication/securing-your-account-with-two-factor-authentication-2fa/about-twofactor-authentication 보안 강화(권장됨)   ssh key 생성과 계정에 추가  github는 패스워드 입력을 이용한 저장소 사용이 금지됨, ssh key를 사용해야 함 https://docs.github.com/ko/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-addingit-to-the-ssh-agent https://docs.github.com/ko/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-githubaccount     github 주요 개념 Remote Repository  원격 저장소는 코드 및 프로젝트 파일을 저장하고 관리하는 공간입니다.</description>
    </item>
    
    <item>
      <title>Git Post</title>
      <link>https://goliot.github.io/teamWebPage/git/git_post/</link>
      <pubDate>Wed, 24 Jun 2015 13:50:46 +0200</pubDate>
      
      <guid>https://goliot.github.io/teamWebPage/git/git_post/</guid>
      <description>소스 관리 소스 상태  관리 대상 여부  tracked(추적대상)  관리 대상     untracked(추적대상 아님)  관리 대상 아님   확인  git status    관리 대상 상태  committed : 버전관리에 안전하게 저장됨, snapshot staged : 커밋할 대상이라고 표시된 상태 modified : 파일이 수정되었지만 staged 되지 않음 tracked인 파일은 변경을 감지함 untracked인 파일은 변경을 감지하지 않음 untracked인 파일이 새로 생긴 것은 감지함  관리 대상으로 만들기  git add &amp;lt;file 또는 디렉토리&amp;gt;  untracked 파일을 tracked로 변경 동시에 staged로 변경 이미 tracked이고 modified인 경우 staged로 변경 디렉토리를 지정한 경우 하위의 모든 파일까지 변경    소스 관리에서 제외 하기  git add dir : dir과 하위 디렉토리에 있는 모든 파일들이 stage됨, .</description>
    </item>
    
    <item>
      <title>리눅스 개요</title>
      <link>https://goliot.github.io/teamWebPage/linux/categories-post/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://goliot.github.io/teamWebPage/linux/categories-post/</guid>
      <description>categories = [&amp;quot;programming&amp;quot;,&amp;quot;linux&amp;quot;,&amp;quot;OSS&amp;quot;]  리눅스 개념 리눅스란? - 오픈소스 운영체제로, 컴퓨터 시스템에서 소프트웨어와 하드웨어를 연결해 주는 소프트웨어 계층이다 - 리눅스는 1991년 리누스 토발즈(Linus Torvalds) 가 개발하였으며 그의 이름 리누스와 UNIX를 합쳐 만든것. - 리눅스는 커널, 라이브러리, 유틸리티와 User Interface 로 구성되어 있다 - 커널(kernel) 은 운영체제의 핵심이며 하드웨어 자원을 관리하고 실행하게 함. 다음은 커널의 핵심 기능 4가지이다. 1. 메모리관리 2. 프로세스 관리 3. 장치 드라이버 4. 시스템 호출 및 보안 - 리눅스는 Multi-tasking, Multiuser, 단일형 커널이다 - 리눅스는 다중 사용자 환경을 지원하기 때문에 여러 사용자가 동시에 시스템에 접속하여 작업이 가능하다 - 또한 리눅스는 안정성과 보안성이 뛰어나 서버 운영체제로 널리 사용된다.</description>
    </item>
    
  </channel>
</rss>
